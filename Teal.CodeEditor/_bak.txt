
        #region 区域

        ///// <summary>
        ///// 表示一个 Range 对象弱引用。
        ///// </summary>
        //private class RangeWeakReference : WeakReference {

        //    private RangeWeakReference prev;

        //    public RangeWeakReference(Range range)
        //        : base(range) {

        //    }

        //}

        ///// <summary>
        ///// 所有 Range 对象列，文档更新后需同时更新所有 Range 对象。
        ///// </summary>
        //RangeWeakReference _ranges;

        ///// <summary>
        ///// 创建一个文档区域对象。
        ///// </summary>
        ///// <returns></returns>
        //public Range createRange() {
        //    var range = new Range();

        //    // todo: 添加列表

        //    return range;
        //}

        #endregion

        /// <summary>
        /// 计算加上指定字符串后新坐标。
        /// </summary>
        /// <param name="x">当前的左边距。</param>
        /// <param name="s">追加的字符。</param>
        /// <returns>返回添加指定字符后的新坐标。</returns>
        public int alignString(int x, string s) {
            for (var i = 0; i < s.Length; i++) {
                x = alignChar(x, s[i]);
            }
            return x;
        }

        /// <summary>
        /// 计算加上指定字符串后新坐标。
        /// </summary>
        /// <param name="x">当前的左边距。</param>
        /// <param name="s">追加的字符数组。</param>
        /// <param name="startIndex">开始的索引。</param>
        /// <param name="endIndex">结束的索引。</param>
        /// <returns>返回添加指定字符后的新坐标。</returns>
        public int alignChars(int x, char[] chars, int startIndex, int endIndex) {
            for (var i = startIndex; i < endIndex; i++) {
                x = alignChar(x, chars[i]);
            }
            return x;
        }
		
        ///// <summary>
        ///// 在指定区域插入一个字符串。
        ///// </summary>
        ///// <param name="line">插入的行号。</param>
        ///// <param name="column">插入的列号。</param>
        ///// <param name="value">要插入的字符串。</param>
        ///// <param name="enableUndo">指示是否将当前操作添加到撤销列表。</param>
        //public void insert(int line, int column, string value, bool enableUndo = true) {
        //    var newEnd = document.insert(line, column, value);
        //    addUndo(new InsertBlockOperation(line, column, newEnd.Y, newEnd.X, value));
        //    setCaretLocation(newEnd.Y, newEnd.X);
        //}
		
        /// <summary>
        /// 在当前光标位置插入换行符。
        /// </summary>
        public void breakLine() {
            int indentCount;
            _document.breakLine(caretLine, caretColumn, inheritIndents, DocumentLineFlags.NEW_LINE_TYPE, out indentCount);
            addUndo(new BreakLineOperation(caretLine, caretColumn, indentCount));
            setCaretLocation(caretLine + 1, indentCount);
        }

        /// <summary>
        /// 在指定位置插入一个多行字符串。
        /// </summary>
        /// <param name="line">插入的行号。</param>
        /// <param name="column">插入的列号。</param>
        /// <param name="value">插入的字符串。</param>
        public void insertBlock(int line, int column, string value) {
            //var undo = new InsertBlockUndoableOperation() {
            //    line = line,
            //    column = column,
            //    value = value
            //};
            //addUndo(undo);
            //undo.endLocation = _document.insertBlock(line, column, value);
        }
		
        #region 通用编辑处理程序

        /// <summary>
        /// 替换当前选区内容为指定内容。
        /// </summary>
        /// <param name="value"></param>
        private void replaceSelections(string value, bool select) {

        }

        /// <summary>
        /// 删除指定区域的字符串。
        /// </summary>
        /// <param name="caretLine">操作之前的光标所在行，用于撤销后回复光标位置。</param>
        /// <param name="caretColumn">操作之前的光标所在列，用于撤销后回复光标位置。</param>
        /// <param name="startLine">替换的起始行。</param>
        /// <param name="startColumn">替换的起始列。</param>
        /// <param name="endLine">替换的结束行。</param>
        /// <param name="endColumn">替换的结束列。</param>
        public void delete(int caretLine, int caretColumn, int startLine, int startColumn, int endLine, int endColumn) {
            var oldValue = document.getText(startLine, startColumn, endLine, endColumn);
            document.delete(startLine, startColumn, endLine, endColumn);
            addUndo(new DeleteBlockOperation(caretLine, caretColumn, startLine, startColumn, endLine, endColumn, oldValue));
            setCaretLocation(startLine, startColumn);
        }

        /// <summary>
        /// 替换指定区域的字符串。
        /// </summary>
        /// <param name="caretLine">操作之前的光标所在行，用于撤销后回复光标位置。</param>
        /// <param name="caretColumn">操作之前的光标所在列，用于撤销后回复光标位置。</param>
        /// <param name="startLine">替换的起始行。</param>
        /// <param name="startColumn">替换的起始列。</param>
        /// <param name="endLine">替换的结束行。</param>
        /// <param name="endColumn">替换的结束列。</param>
        /// <param name="value">替换的字符串。</param>
        public void replace(int caretLine, int caretColumn, int startLine, int startColumn, int endLine, int endColumn, string value) {
            var oldValue = document.getText(startLine, startColumn, endLine, endColumn);
            var newEnd = document.replace(startLine, startColumn, endLine, endColumn, value);
            addUndo(new ReplaceBlockOperation(caretLine, caretColumn, startLine, startColumn, endLine, endColumn, oldValue, newEnd.Y, newEnd.X, value));
            setCaretLocation(newEnd.Y, newEnd.X);
        }

        #endregion

        /// <summary>
        /// 将指定的行将和上一行合并为一行。
        /// </summary>
        /// <param name="line">要删除的行号。</param>
        public void unbreakLine(int line) {
            //addUndo(new UnbreakLineUndoableOperation() {
            //    line = line
            //});

            _document.unbreakLine(line);
        }

        /// <summary>
        /// 计算加上指定字符后新坐标。
        /// </summary>
        /// <param name="left">当前的左边距。</param>
        /// <param name="ch">追加的字符。</param>
        /// <returns>返回添加指定字符后的新坐标。</returns>
        private int alignChar(int left, char ch) {
            return ch == '\t' ? alignTab(left) : (left + _painter.measureString(ch));
        }
		
    ///// <summary>
    ///// 表示移动光标的撤销操作。
    ///// </summary>
    //sealed class MoveCaretOperation : UndoableOperation {

    //    /// <summary>
    //    /// 判断当前操作是否可以和指定操作同时执行。
    //    /// </summary>
    //    /// <param name="document">要撤销的文档。</param>
    //    /// <param name="op">要判断的操作。</param>
    //    /// <returns>如果可以同时执行则返回 true，否则返回 false。</returns>
    //    public override bool canChain(Document document, UndoableOperation op) {
    //        return true;
    //    }

    //    /// <summary>
    //    /// 对指定编辑器执行当前的撤销操作。
    //    /// </summary>
    //    /// <param name="document">要撤销的文档。</param>
    //    public override void undo(Document document) {
    //        editor.setCaretLocation(oldLine, oldColumn);
    //    }

    //    /// <summary>
    //    /// 对指定编辑器执行当前的恢复操作。
    //    /// </summary>
    //    /// <param name="document">要恢复的文档。</param>
    //    public override void redo(Document document) {
    //        editor.setCaretLocation(newLine, newColumn);
    //    }

    //}

    ///// <summary>
    ///// 表示插入字符的撤销操作。
    ///// </summary>
    //sealed class ReplaceCharUndoableOperation : UndoableOperation {

    //    /// <summary>
    //    /// 获取之前的字符。
    //    /// </summary>
    //    public char oldValue;

    //    /// <summary>
    //    /// 获取替换的字符。
    //    /// </summary>
    //    public char newValue;

    //    /// <summary>
    //    /// 判断当前操作是否可以和指定操作同时执行。
    //    /// </summary>
    //    /// <param name="document">要撤销的文档。</param>
    //    /// <param name="op">要判断的操作。</param>
    //    /// <returns>如果可以同时执行则返回 true，否则返回 false。</returns>
    //    public override bool canChain(Document document, UndoableOperation op) {
    //        return op is ReplaceCharUndoableOperation && !editor.isDelimiter(((ReplaceCharUndoableOperation)op).newValue);
    //    }

    //    /// <summary>
    //    /// 对指定编辑器执行当前的撤销操作。
    //    /// </summary>
    //    /// <param name="document">要撤销的文档。</param>
    //    public override void undo(Document document) {
    //        editor.document.replaceChar(oldLine, oldColumn, oldValue);
    //    }

    //    /// <summary>
    //    /// 对指定编辑器执行当前的恢复操作。
    //    /// </summary>
    //    /// <param name="document">要恢复的文档。</param>
    //    public override void redo(Document document) {
    //        editor.document.replaceChar(oldLine, oldColumn, newValue);
    //    }

    //}
