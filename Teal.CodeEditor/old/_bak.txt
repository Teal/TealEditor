
        #region 区域

        /// <summary>
        /// 避免在调用 endUpdate() 方法之前描述控件。
        /// </summary>
        public void beginUpdate() {
            // _updateCount++;
        }

        /// <summary>
        /// 在 beginUpdate() 方法挂起描述后，继续描述控件。
        /// </summary>
        public void endUpdate() {
            //_updateCount--;
            //updateLayout();
        }

        ///// <summary>
        ///// 表示一个 Range 对象弱引用。
        ///// </summary>
        //private class RangeWeakReference : WeakReference {

        //    private RangeWeakReference prev;

        //    public RangeWeakReference(Range range)
        //        : base(range) {

        //    }

        //}

        ///// <summary>
        ///// 所有 Range 对象列，文档更新后需同时更新所有 Range 对象。
        ///// </summary>
        //RangeWeakReference _ranges;

        ///// <summary>
        ///// 创建一个文档区域对象。
        ///// </summary>
        ///// <returns></returns>
        //public Range createRange() {
        //    var range = new Range();

        //    // todo: 添加列表

        //    return range;
        //}

        #endregion

        ///// <summary>
        ///// 在指定区域插入一个字符串。
        ///// </summary>
        ///// <param name="line">插入的行号。</param>
        ///// <param name="column">插入的列号。</param>
        ///// <param name="value">要插入的字符串。</param>
        ///// <param name="enableUndo">指示是否将当前操作添加到撤销列表。</param>
        //public void insert(int line, int column, string value, bool enableUndo = true) {
        //    var newEnd = document.insert(line, column, value);
        //    addUndo(new InsertBlockOperation(line, column, newEnd.Y, newEnd.X, value));
        //    setCaretLocation(newEnd.Y, newEnd.X);
        //}
		
        /// <summary>
        /// 在当前光标位置插入换行符。
        /// </summary>
        public void breakLine() {
            int indentCount;
            _document.breakLine(caretLine, caretColumn, inheritIndents, DocumentLineFlags.NEW_LINE_TYPE, out indentCount);
            addUndo(new BreakLineOperation(caretLine, caretColumn, indentCount));
            setCaretLocation(caretLine + 1, indentCount);
        }

        /// <summary>
        /// 在指定位置插入一个多行字符串。
        /// </summary>
        /// <param name="line">插入的行号。</param>
        /// <param name="column">插入的列号。</param>
        /// <param name="value">插入的字符串。</param>
        public void insertBlock(int line, int column, string value) {
            //var undo = new InsertBlockUndoableOperation() {
            //    line = line,
            //    column = column,
            //    value = value
            //};
            //addUndo(undo);
            //undo.endLocation = _document.insertBlock(line, column, value);
        }
		
        #region 通用编辑处理程序

        /// <summary>
        /// 替换当前选区内容为指定内容。
        /// </summary>
        /// <param name="value"></param>
        private void replaceSelections(string value, bool select) {

        }

        /// <summary>
        /// 删除指定区域的字符串。
        /// </summary>
        /// <param name="caretLine">操作之前的光标所在行，用于撤销后回复光标位置。</param>
        /// <param name="caretColumn">操作之前的光标所在列，用于撤销后回复光标位置。</param>
        /// <param name="startLine">替换的起始行。</param>
        /// <param name="startColumn">替换的起始列。</param>
        /// <param name="endLine">替换的结束行。</param>
        /// <param name="endColumn">替换的结束列。</param>
        public void delete(int caretLine, int caretColumn, int startLine, int startColumn, int endLine, int endColumn) {
            var oldValue = document.getText(startLine, startColumn, endLine, endColumn);
            document.delete(startLine, startColumn, endLine, endColumn);
            addUndo(new DeleteBlockOperation(caretLine, caretColumn, startLine, startColumn, endLine, endColumn, oldValue));
            setCaretLocation(startLine, startColumn);
        }

        /// <summary>
        /// 替换指定区域的字符串。
        /// </summary>
        /// <param name="caretLine">操作之前的光标所在行，用于撤销后回复光标位置。</param>
        /// <param name="caretColumn">操作之前的光标所在列，用于撤销后回复光标位置。</param>
        /// <param name="startLine">替换的起始行。</param>
        /// <param name="startColumn">替换的起始列。</param>
        /// <param name="endLine">替换的结束行。</param>
        /// <param name="endColumn">替换的结束列。</param>
        /// <param name="value">替换的字符串。</param>
        public void replace(int caretLine, int caretColumn, int startLine, int startColumn, int endLine, int endColumn, string value) {
            var oldValue = document.getText(startLine, startColumn, endLine, endColumn);
            var newEnd = document.replace(startLine, startColumn, endLine, endColumn, value);
            addUndo(new ReplaceBlockOperation(caretLine, caretColumn, startLine, startColumn, endLine, endColumn, oldValue, newEnd.Y, newEnd.X, value));
            setCaretLocation(newEnd.Y, newEnd.X);
        }

        #endregion

        /// <summary>
        /// 将指定的行将和上一行合并为一行。
        /// </summary>
        /// <param name="line">要删除的行号。</param>
        public void unbreakLine(int line) {
            //addUndo(new UnbreakLineUndoableOperation() {
            //    line = line
            //});

            _document.unbreakLine(line);
        }

    ///// <summary>
    ///// 表示移动光标的撤销操作。
    ///// </summary>
    //sealed class MoveCaretOperation : UndoableOperation {

    //    /// <summary>
    //    /// 判断当前操作是否可以和指定操作同时执行。
    //    /// </summary>
    //    /// <param name="document">要撤销的文档。</param>
    //    /// <param name="op">要判断的操作。</param>
    //    /// <returns>如果可以同时执行则返回 true，否则返回 false。</returns>
    //    public override bool canChain(Document document, UndoableOperation op) {
    //        return true;
    //    }

    //    /// <summary>
    //    /// 对指定编辑器执行当前的撤销操作。
    //    /// </summary>
    //    /// <param name="document">要撤销的文档。</param>
    //    public override void undo(Document document) {
    //        editor.setCaretLocation(oldLine, oldColumn);
    //    }

    //    /// <summary>
    //    /// 对指定编辑器执行当前的恢复操作。
    //    /// </summary>
    //    /// <param name="document">要恢复的文档。</param>
    //    public override void redo(Document document) {
    //        editor.setCaretLocation(newLine, newColumn);
    //    }

    //}

    ///// <summary>
    ///// 表示插入字符的撤销操作。
    ///// </summary>
    //sealed class ReplaceCharUndoableOperation : UndoableOperation {

    //    /// <summary>
    //    /// 获取之前的字符。
    //    /// </summary>
    //    public char oldValue;

    //    /// <summary>
    //    /// 获取替换的字符。
    //    /// </summary>
    //    public char newValue;

    //    /// <summary>
    //    /// 判断当前操作是否可以和指定操作同时执行。
    //    /// </summary>
    //    /// <param name="document">要撤销的文档。</param>
    //    /// <param name="op">要判断的操作。</param>
    //    /// <returns>如果可以同时执行则返回 true，否则返回 false。</returns>
    //    public override bool canChain(Document document, UndoableOperation op) {
    //        return op is ReplaceCharUndoableOperation && !editor.isDelimiter(((ReplaceCharUndoableOperation)op).newValue);
    //    }
	
        /// <summary>
        /// 获取或设置当前片段类型的父级类型。
        /// </summary>
        public SegmentType parent;

    //    /// <summary>
    //    /// 对指定编辑器执行当前的撤销操作。
    //    /// </summary>
    //    /// <param name="document">要撤销的文档。</param>
    //    public override void undo(Document document) {
    //        editor.document.replaceChar(oldLine, oldColumn, oldValue);
    //    }
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Teal.CodeEditor {

    /// <summary>
    /// 表示一个代码视图。
    /// </summary>
    public sealed class CodeView {

        #region 核心

        private Document document { get; set; }

        #endregion

        #region 布局

        private void layoutLine(int line) {
            var layoutLine = new LayoutLine();
            var documentLine = document[line];

            // 获取 documentLine 的所有折叠域。



            // 获取 documentLine 的 segments

            var x = 0;

        }

        #endregion

        #region 绘图

        /// <summary>
        /// 重新绘制整个控件指定的区块。
        /// </summary>
        /// <param name="left">绘制的起始位置。</param>
        /// <param name="top">绘制的起始位置。</param>
        /// <param name="right">绘制的结束位置。</param>
        /// <param name="bottom">绘制的结束位置。</param>
        private void draw(int left, int top, int right, int bottom) {

            // 1. 根据 left 决定绘制的内容。

            int line = topToLine(top);

            // 绘制边界。
            drawGutter(visualStartLine, top, bottom);

            // 绘制所有行。
            drawLines(visualStartLine, top, bottom);

        }

        /// <summary>
        /// 在指定位置绘制所有行。
        /// </summary>
        /// <param name="visualStartLine">绘制的目标显示行。</param>
        /// <param name="top">绘制的上边距。</param>
        /// <param name="bottom">最大绘制的下边距。超过此区域停止绘制。</param>
        private void drawLines(int visualStartLine, int top, int bottom) {

            // 绘制背景。
            drawBackground(top, bottom);

            top -= _scrollTop;
            var baseLeft = documentLeft - _scrollLeft;

            // 绘制每行。
            int nextVisualLine;
            for (var visualLineCount = visualLines.Count; visualStartLine < visualLineCount && top < bottom; visualStartLine = nextVisualLine, top += painter.lineHeight) {

                var visualLine = visualLines[visualStartLine];

                // 判断下行是否和当前行属于相同实际行。
                nextVisualLine = visualStartLine + 1;
                var nextVisualLineIsSameLine = nextVisualLine < visualLineCount && visualLines[nextVisualLine].isWrapLine;

                // 绘制每个元素。
                var line = visualLine.startLine;
                var column = visualLine.startColumn;
                var left = baseLeft + visualLine.left;

                // 如果当前行包含折叠项，则先绘制折叠内容。
                for (var visualFoldBlock = visualLine.nextFoldBlock; visualFoldBlock != null; visualFoldBlock = visualFoldBlock.nextFoldBlock) {
                    drawTextBlock(line, column, visualFoldBlock.foldingRange.startColumn, left, top);
                    drawFoldBlock(visualFoldBlock, top);
                    line = visualFoldBlock.foldingRange.endLine;
                    column = visualFoldBlock.foldingRange.endColumn;
                    left = visualFoldBlock.right;
                }

                // 绘制最后一段文本。
                int x = drawTextBlock(line, column, nextVisualLineIsSameLine ? visualLines[nextVisualLine].startColumn : _document.lines[visualLine.startLine].length, left, top);

                // 绘制换行。
                if (_showAutoBreakMark && nextVisualLineIsSameLine) {
                    drawAutoBreaklineMark(top);
                } else if (_showLineBreaks) {
                    // todo
                    // drawControlChar(controlName, x, lastLeft, top);
                }

            }

        }

        /// <summary>
        /// 绘制背景。
        /// </summary>
        /// <param name="top">绘制的起始位置。</param>
        /// <param name="bottom">绘制的结束位置。</param>
        private void drawBackground(int top, int bottom) {
            painter.fillColor = _backColor;
            painter.fillRectangle(gutterWidth, top, gutterWidth + documentWidth, bottom);
        }


        #endregion

        /// <summary>
        /// 存储目前最宽的行。如果值等于 -1 则需重新计算。
        /// </summary>
        private int _maxWidthLine = 0;

        #region 滚动条位置

        /// <summary>
        /// 获取或设置当前编辑器水平滚动的位置。
        /// </summary>
        public int scrollLeft {
            get {
                return _scrollLeft;
            }
            set {
                if (_scrollLeft != value) {
                    _scrollLeft = value;
                    //if (_hScrollBar != null) {
                    //    _hScrollBar.Value = value;
                    //}
                    //updateLayout();
                }
            }
        }

        /// <summary>
        /// 获取或设置当前编辑器垂直滚动的位置。
        /// </summary>
        public int scrollTop {
            get {
                return _scrollTop;
            }
            set {
                if (_scrollTop != value) {
                    _scrollTop = value;
                    //if (_vScrollBar != null) {
                    //    _vScrollBar.Value = value;
                    //}
                    //updateLayout();
                }
            }
        }

        ///// <summary>
        ///// 获取或设置当前编辑器滚动区域。
        ///// </summary>
        //public Point scrollPosition {
        //    get {
        //        return new Point(scrollLeft, scrollTop);
        //    }
        //    set {
        //        setScroll(value.X, value.Y);
        //    }
        //}

        ///// <summary>
        ///// 获取当前控件的滚动大小。
        ///// </summary>
        //public Size scrollSize {
        //    get {
        //        return new Size(scrollWidth, scrollHeight);
        //    }
        //}

        ///// <summary>
        ///// 获取或设置当前滚动的行号。
        ///// </summary>
        //public int scrollLine {
        //    get {
        //        return scrollTop / painter.lineHeight;
        //    }
        //    set {
        //        scrollTop = value * painter.lineHeight;
        //    }
        //}

        ///// <summary>
        ///// 获取或设置当前滚动的列号。
        ///// </summary>
        //public int scrollColumn {
        //    get {
        //        return scrollLeft / painter.fontWidth;
        //    }
        //    set {
        //        scrollLeft = value * painter.fontWidth;
        //    }
        //}

        ///// <summary>
        ///// 更新滚动条的位置。
        ///// </summary>
        //private void updateScrollPositions() {



        //}

        ///// <summary>
        ///// 滚动到指定位置。
        ///// </summary>
        ///// <param name="top"></param>
        ///// <param name="left"></param>
        //public void setScroll(int top, int left) {
        //    beginUpdate();
        //    scrollTop = top;
        //    scrollLeft = left;
        //    endUpdate();
        //}

        ///// <summary>
        ///// 平滑滚动到指定位置。
        ///// </summary>
        ///// <param name="top"></param>
        ///// <param name="left"></param>
        //public void scrollTo(int top, int left) {

        //}

        ///// <summary>
        ///// 平滑滚动到指定位置。
        ///// </summary>
        ///// <param name="deltaX"></param>
        ///// <param name="deltaY"></param>
        //public void scrollBy(int deltaX, int deltaY) {
        //    scrollTo(scrollLeft + deltaX, scrollTop + deltaY);
        //}

        #endregion

        /// <summary>
        /// 切换指定区域的折叠状态。
        /// </summary>
        /// <param name="line">折叠区域。</param>
        /// <returns>如果确实折叠行，则返回 true。</returns>
        public bool toggleFold(int line) {
            throw new NotImplementedException();
        }

        /// <summary>
        /// 确保指定位置未被折叠。
        /// </summary>
        /// <param name="line">要显示的行。</param>
        /// <param name="column">要显示的列。</param>
        /// <returns>如果已展开行则返回 true，否则返回 false。</returns>
        public bool ensureVisible(int line, int column) {
            throw new NotImplementedException();
        }

        //private FoldingRange getFoldingRange(int line, int column) {
        //    throw new NotImplementedException();
        //}

        //private FoldingRange getFoldBlockByStart(int line, int column) {
        //    throw new NotImplementedException();
        //}

        //private FoldingRange getFoldingRangeByEnd(int line, int column) {
        //    throw new NotImplementedException();
        //}

        //private FoldingRange getFoldingRangeByLine(int line) {
        //    throw new NotImplementedException();
        //}


        void t() {
            DocumentLine line;
            // line.segments.First().type.c

        }


    }

    /// <summary>
    /// 表示一个布局行。
    /// </summary>
    [DebuggerDisplay("line top={top}")]
    sealed class LayoutLine {

        /// <summary>
        /// 获取当前布局行对应的文档行。
        /// </summary>
        public DocumentLine line;

        /// <summary>
        /// 获取当前布局行对应文档行的第一列。
        /// </summary>
        public int column;

    }

    /// <summary>
    /// 指示一个位置的代码信息。
    /// </summary>
    public struct CodeLayoutInfo {

    }

}

    //    /// <summary>
    //    /// 对指定编辑器执行当前的恢复操作。
    //    /// </summary>
    //    /// <param name="document">要恢复的文档。</param>
    //    public override void redo(Document document) {
    //        editor.document.replaceChar(oldLine, oldColumn, newValue);
    //    }

    //}
